第七章
1、简述简单Shell程序的创建过程。
Shell程序就是放在一个文件中的一系列Linux命令和实用程序，在执行的时候，通过Linux系统一个接着一个地解释和执行每个命令
	1.创建文件文本，编辑器创建，如
	      #!/bin/bash
		  #filename:date
          echo “Mr.$USER,Today is:” date
          echo Whish you a lucky day !
	2.设置可执行权限
		  chmod u+x /root/date

2、简述执行Shell程序有哪些方法？
	1. 输入整个文件的完整路径执行Shell程序，使用如下命令执行
 	/root/date
 	2. 使用bash命令执行程序在执行Shell程序时需要将date文件设置为可执行权限。如果不设置文件的可执行权限，那么需要使用 bash命令告诉系统它是一个可执行的脚本，使用如下 命令执行Shell程序。
  
3、简述常见的Shell环境变量。
	HOME:用于保存用户宿主目录的完全路径名
	PATH:默认命令搜索路径
	TERM:终端的类型
	UID:当前用户的识别号 
	PWD:当前工作目录的绝对路径名
	PS1:用户平时的提示符
	PS2:第一行没输完，等待第二行输入的提示符

4、简述Shell程序有哪些条件判断语句和循环控制语句？
	在Shell程序中使用条件判断语句可以使用if条件语句和case条件语句，两者的区别在 于使用case语句的选项比较多而已
	
	1.if条件语句
		Shell程序中的条件分支是通过if条件语句来实现的，其一般格式有if-then语句和if- then-else语句两种。
			(1)if-then 语句
				if-then语句的语法如下: 

				if 命令行1
				then
					命令行2 
				fi
			(2)if-then-else语句
			if-then-else语句的语法如下: 

			if 命令行1
			then 
				命令行2
			else
				命令行3 
			fi
	 2.case条件语句
		if条件语句用于在两个选项中选定一项，而case条件选择为用户提供了根据字符串或变 量的值从多个选项中选择一项的方法，其语法 格式如下所示:
			case string in
			exp-1) 若干个命令行1
			;;
			exp-2) 若干个命令行2
			;;
			......
			*)
			esac
	在Shell程序中使用循环控制语句可以使用for语句、while语句以及until语句
	1.for循环语句
		for循环语句对一个变量的可能的值都执行一个命令序列。赋给变量的几个数值既可以在程序中以数值列表的形式提供，也可以在程 序以外以位置参数的形式提供。for循环的一般语法格式为:
				for 变量名 [in数值列表]
				do
				若干个命令行
				done
	变量名可以是用户选择的任何字符串，如果变量名是var，则在in之后给出的数值将顺序替换循环命令列表中的“$var”。如果省略了in，则变量var的取值将是位置参数。对变 量的每一个可能的赋值都将执行do和done之间的命令列表。
   2.while循环语句
			while语句是用命令的返回状态值来控制
			循环的。while循环的一般语法格式为:
			while
			若干个命令行1
			do
			若干个命令行2

	done只要while的“若干个命令行1”中最后一个命令的返回状态为真，while循环就继续执行“do...done”之间的“若干个命令行2”。
   3.until循环语句
		until语句是另一种循环结构，它和
		while语句相似，其语句格式如下: 

			until
			若干个命令行1
			do
			若干个命令行2
			done
	until循环和while循环的区别在于: while循环在条件为真时继续执行循环，而 until则是在条件为假时继续执行循环。Shell还提供了true和false两条命令用于创建无限循环结构，它们的返回状态分别是总为0或总为非0。


第八章
1、简述Linux系统中用户有哪些分类。
	在Linux系统中主要有root用户、虚拟用户和普通用户这3类用户。
	1.root用户
		root用户是Linux系统的内置用户，在系统中的权限最高，普通用户无法执行的操作，root用户都可以操作，以也被称之为超级管 理用户。在系统中的每个文件、目录和进程都归属于某一个用户，没有用户许可，除root用户外的其它普通用户无法进行操作。

	2.虚拟用户
		这类用户也被称为伪用户或假用户，这类用户不具有登录系统的能力，但却是系统运行不可缺少的用户，比如bin，daemon，adm， ftp以及mail等用户账户，这类用户都是Linux 系统的内置用户
	3.普通用户
		这类用户是由系统管理员创建，并且能登 录Linux系统。只能操作自己目录内的文件， 权限有限。

2、管理用户账户的配置文件有哪些？并描述这些文件各字段的含义。
	 1./etc/passwd文件
		/etc/passwd是系统识别用户的一个文件，Linux系统中所有的用户都记录在该文件中	    任何用户都可以读取该文件内容，
		在 /etc/passwd文件中，每一行表示的是一个用户账户信息，一行有7个段位，每个段位用“:” 分隔
		用户名 也称为登录名，在系统内用户名应该具有唯一性。在本例中，zhangsan就是用户名
		口令: 存放加密的口令，在本例中看到的是一个x，其实口令已被映射到/etc/shadow文件中了
		用户标识号: 在系统内用一个整数标识用户ID号，每个用户的UID都是唯一的，
		root用户的UID是0，普通用户的UID  默认从1000开始
		组群标识号: 在系统内用一个整数标识用户所属的组群的ID号，每个组群的GID都是唯一的
		用户名全称: 用户名描述，可以不设置。在本例中，zhangsan用户的用户名全称是“张三”
		主目录: 用户登录系统后首先进入的目录，zhangsan用户的主目录是/home/zhangsan
		登录Shell: 用户使用的Shell类型，Fedora 17系统默认使用的Shell是bash
	用户UID的概述
		UID是用户的ID值，在系统中每个用户的UID值是唯一的，更确切地说每个用户都要对应一个唯一的UID。Linux系统用 户的UID值是一个正整数，初始值从0开始，在Fedora 17系统 中的最大默认值是60000。在Linux系统中，root的UID是0，拥有系统最高权限。
		UID的唯一性关系到系统的安全，比如在/etc/passwd文件中把用户zhangsan的UID改为0后，zhangsan这个用户会被确认 为root用户，当用这个账户登录到系统后，可以进行所有 root用户才能执行的操作。
		UID是确认用户权限的标识，用户登录系统所处的角色是 通过UID来实现的，而不是用户名。

	 2./etc/shadow文件
		/etc/shadow文件是/etc/passwd文件的影子 文件，这个文件并不是由/etc/passwd文件产生， 这两个文件是对应互补的。/etc/shadow文件内容 包括用户及被加密的口令及其他/etc/passwd不能 包括的信息，比如用户账户的有效期限等。
		/etc/shadow文件的内容包括9个段位，每个 段位之间用“:”分隔。

		用户名: 这里的用户名和/etc/passwd中的用户名是相同的
		加密口令: 口令已经加密，如果有些用户在这里显示的是“!!”，则表示这个用 户还没有设置口令，不能登录到系统
		用户最后一次更改口令的日期: 从1970年1月1日算起到最后一次修改口令的时间间隔(天数)
		口令允许更换前的天数: 如果设置为0，则禁用此功能。该字段是指用户可以更改口令的天数
		口令需要更换的天数: 如果设置为0，则禁用此功能。该字段是指用户必须更改口令的天数
		口令更换前警告的天数: 用户登录系统后，系统登录程序提醒用户口令将要过期
		账户被取消激活前的天数: 表示用户口令过期多少天后，系统会禁用此用户，也就是说系统会不让此用户登录，也不会提示用户过期，是完全禁用的
		用户账户过期日期: 指定用户账户禁用的天数(从1970年的1月1日开始到账户被禁用的天 数)，如果这个字段的值为空，账户永久可用
		保留字段: 目前为空，以备将来Linux系统发展时用

3、管理组群账户的配置文件有哪些？并描述这些文件各字段的含义。
	具有某种共同特征的用户集合就是用户组群，用户组群配置文件主要有/etc/group和 /etc/gshadow，其中/etc/gshadow是 /etc/group的加密信息文件
	
	1./etc/group文件
	/etc/group文件是用户组群的配置文件，内容包括用户和用户组群，并且能显示出用户是归属哪个用户组群或哪几个用户组群。

	1)/etc/group文件内容
	/etc/group文件的内容包括用户组群名、 用户组群口令、GID及该用户组群所包含的用户，每个用户组群都有一条记录。一行有4个段位，每个段位用“:”分隔，下面是 /etc/group文件的部分内容。

	组群名: 用户组群名称，如组群名root
	组群口令: 存放加密的密码，在上面示例中我们看到的是一个x，其实口令已被映射到/etc/gshadow 文件中
	组群标识号: 在系统内用一个整数标识组群GID，每个组群的GID都
	是唯一的，默认普通组群的GID从1000开始，如root组群GID是0
	组群成员: 属于这个组群的成员，如root组群的成员有root用户

	2)组群GID的概述
	组群GID和UID类似，是一个从0开始的正 整数，GID为0的组群是root组群。Fedora 17系统会预留1000个GID号给系 统虚拟用户组群使用，创建的新组群GID是从 1000开始的。

	 2./etc/gshadow文件
	/etc/gshadow文件是/etc/group的加密文件，
	比如用户组群管理口令就是存放在这个文件中。这两个文件是对应互补的。/etc/gshadow文件中每个 用户组群都有一条记录。一行有4个段位，每个段位 之间用“:”分隔。

	组群名: 组群的名称
	组群口令: 口令已经加密，如果有些组群在这里显示的是“!”，表示这个组群没有口令。
	上面示例中组群shanghai没有口令，组群 beijing已设置口令
	组群管理者: 组群的管理者，有权在该组群中添加、删除用户
	组群成员: 属于该组群的用户成员列表，如有多个用户用“，”分隔。上 面示例中beijing组群的成员是ou
第九章
1、fdisk有哪些子命令，其含义分别是什么？

	m: 显示所有在fdisk中使用的命令
	p: 显示硬盘分区信息
	a: 设置硬盘启动区
	n: 创建新的分区
	e: 创建扩展分区
	p: 创建主分区
	t: 更改分区文件系统
	d: 删除硬盘分区
	q: 退出fdisk，不保存硬盘分区设置
	w: 保存硬盘分区设置并退出fdisk

2、使用某个文件系统存放数据，一般要经过哪几个操作步骤？
	
	(1)使用fdisk命令在硬盘上创建分区。 
	(2)使用mkfs命令在分区上创建文件系统。 
	(3)使用mount命令挂载文件系统，或修改/etc/fstab文件使得开机自动挂载文件系统。
	(4)使用umount卸载文件系统。
3、文件有哪些权限，含义分别是什么？
	在Linux系统中，每种用户都有对文件或目录的读取、写入和执行权限。
	r(读取) 可读取文件内容 可浏览目录
	w(写入) 可修改文件内容 可删除、移动目录内文件
	x(执行) 可执行文件 可进入目录

4、可以使用哪些方法设置文件的权限？
 1.文件管理器更改权限
 2.文字设定法
	通过文字设定法更改权限需要使用chmod命令，chmod的命令格式如下:
	chmod [ugoa][+-=][rwx][文件或目录名]
	u表示该文件的所有者，g表示与该文件的所有者属于同一个组的用户，o表示其他用户，a表示以
	上三者;+表示增加指定权限，-表示取消指定权限，=表示设定权限等于指定权限;r表示可读取，w表示可写入，x表示表示文件 可执行或目录可进入。
 3.数字设定法
	文件和目录的权限表中用r，w及x这3个字符来为所有者、同组用户和其他用户设置权限。
	有时候，字符似乎过于麻烦，因此还有另外一 种方法是以数字来表示权限，而且仅需3个数字。
	使用数字设定法更改文件权限，首先必须了解数字表示的含义:0表示没有权限，1表示可执行权限，2表示写入权限，4表示读取权限， 然后将其相加。所以数字属性的格式应为3个 0~7的8进制数，其顺序是(u)，(g)， (o)。

	(1)r:对应数值4。
	(2)w:对应数值2。
	(3)x:对应数值1。 
	(4)-:对应数值0。
	使用数字设定法更改文件权限，chmod的 命令格式如下:
		chmod [n1n2n3] [文件或目录名]